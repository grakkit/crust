const Vector=Java.type("org.bukkit.util.Vector"),Location=Java.type("org.bukkit.Location"),ItemStack=Java.type("org.bukkit.inventory.ItemStack"),Cancellable=Java.type("org.bukkit.event.Cancellable"),NamespacedKey=Java.type("org.bukkit.NamespacedKey"),PersistentDataType=Java.type("org.bukkit.persistence.PersistentDataType");export const bridge=(_,$)=>(input,...args)=>{let index=-1;const words=[];input.split(".").forEach(node=>{node.split("").map(char=>{char===_.upper(char)?words[++index]=char:words[index]&&(words[index]+=char)}),++index});let key="";const terms=_.flat(words);return key=terms.length<3?_.camel(terms.join(" ")," "):3===terms.length?_.lower(terms[0][0]+terms[1][0])+terms[2]:_.lower(terms.slice(0,-2).map(term=>term[0]).join(""))+terms.slice(-2).join(""),{[key]:_.object(_.array(Java.type(input).values()),value=>{if(!args[0]||!args[0](value)){let name="";return name=args[1]?args[1](value):"function"==typeof value.getKey?value.getKey().getKey():_.lower(value.name()),{[name]:value,[value]:name}}})}};export const builder=(_,$)=>library=>{const chain=library.chain(_,$);return{wrapper:library.wrapper(_,$),parser:library.parser(_,$),chainer:(things,slayer)=>{const that={},properties={appender:property=>(...args)=>_.def(args[0])?(things.map(thing=>{if("function"==typeof args[0]){const value=thing[property];args[0](value),thing[property]=value}else thing[property]=args[0]}),that):things.map(thing=>thing[property]),getter:property=>(...args)=>"function"==typeof args[0]?(things.map(thing=>args[0](thing[property])),that):things.map(thing=>thing[property]),getterLink:property=>(...args)=>"function"==typeof args[0]?(args[0]($(things.map(thing=>thing[property]))),that):slayer?[$(things.map(thing=>thing[property])[0])]:$(things.map(thing=>thing[property])),lister:property=>(...args)=>_.def(args[0])?(things.map(thing=>{"function"==typeof args[0]?args[0](thing[property]):(thing[property].clear(),args.forEach(thing[property].add))}),that):things.map(thing=>thing[property]),listerNest:property=>(...args)=>_.def(args[0])?_.def(args[1])?(things.map(thing=>{"function"==typeof args[1]?args[1]((thing[property]||{})[args[0]]):thing[property]&&(thing[property][args[0]].clear(),args.slice(1).forEach(thing[property][args[0]].add))}),that):things.map(thing=>"function"==typeof args[0]?args[0](thing[property]||{}):(thing[property]||{})[args[0]]):things.map(thing=>thing[property]||{}),modifier:consumer=>(...args)=>{const outputs=things.map(consumer);return"function"==typeof args[0]?(outputs.map(args[0]),that):outputs},runner:property=>(...args)=>things.map(thing=>thing[property](...args)),runnerLink:property=>(...args)=>slayer?[$(things.map(thing=>thing[property](...args))[0])]:$(things.map(thing=>thing[property](...args))),setter:property=>(...args)=>_.def(args[0])?(things.map(thing=>{"function"==typeof args[0]?args[0](thing[property]):thing[property]=args[0]}),that):things.map(thing=>thing[property]),setterLink:property=>(...args)=>_.def(args[0])?("function"==typeof args[0]?args[0]($(things.map(thing=>thing[property]))):things.map(thing=>thing[property]=$("+").instance(args[0])),that):slayer?[$(things.map(thing=>thing[property])[0])]:$(things.map(thing=>thing[property])),setterNest:property=>(...args)=>_.def(args[0])?_.def(args[1])?(things.map(thing=>{"function"==typeof args[1]?args[1]((thing[property]||{})[args[0]]):(thing[property]||{})[args[0]]=args[1]}),that):things.map(thing=>"function"==typeof args[0]?args[0](thing[property]||{}):(thing[property]||{})[args[0]]):things.map(thing=>thing[property]||{}),voider:property=>(...args)=>(things.map(thing=>thing[property](...args)),that)},scripts=_.object(_.entries(chain),entry=>"function"==typeof entry.value?{[entry.key]:properties.modifier(entry.value)}:{[entry.key]:properties[entry.value](entry.key)});return Object.assign(that,scripts)},links:_.keys(chain)}};export const command=(_,$)=>({on:name=>{let tab=()=>[],run=()=>{};const that={tab:handler=>(tab=handler,that),run:handler=>(run=handler,that)};return core.command({name:name,execute:(...args)=>run(...args),tabComplete:(player,...args)=>tab(player,args.length,...args)||[]}),that}});export const event=(_,$)=>({on:shortcut=>{let type=void 0;const suffix=`${_.pascal(shortcut)}Event`;if(prefixes.forEach(prefix=>{if(void 0===type)try{Java.type(`${prefix}.${suffix}`),type=`${prefix}.${suffix}`}catch(error){}}),void 0===type)throw"EventError: That event does not exist!";{const steps=[],that={if:condition=>(steps.push({type:"condition",item:condition}),that),do:listener=>(steps.push({type:"listener",item:listener}),that)};return core.event(type,event=>{if(event instanceof Java.type(type)){const storage={},cancellable=event instanceof Cancellable;let ready=!0;steps.forEach(step=>{switch(step.type){case"condition":switch(typeof step.item){case"boolean":cancellable&&step.item===event.isCancelled()&&(ready=!1);break;case"function":step.item(event,storage)||(ready=!1);break;case"object":_.match(_.access(event),step.item)||(ready=!1)}break;case"listener":if(ready)try{step.item(event,storage)}catch(error){throw ready=!1,error}}})}}),that}}});export const prefixes=["org.bukkit.event.block","org.bukkit.event.command","org.bukkit.event.enchantment","org.bukkit.event.entity","org.bukkit.event.hanging","org.bukkit.event.inventory","org.bukkit.event.player","org.bukkit.event.raid","org.bukkit.event.server","org.bukkit.event.vehicle","org.bukkit.event.weather","org.bukkit.event.world","org.spigotmc.event.entity","org.spigotmc.event.player","com.destroystokyo.paper.event.block","com.destroystokyo.paper.event.entity","com.destroystokyo.paper.event.executor","com.destroystokyo.paper.event.player","com.destroystokyo.paper.event.profile","com.destroystokyo.paper.event.server"];export const utility=(_,$)=>({backs:source=>_.strain($[source],entry=>entry.key===_.upper(entry.key)),data:(container,value)=>{const key=new NamespacedKey(core.plugin,"jx"),type=PersistentDataType.STRING;if(!_.def(value))return JSON.parse(container.get(key,type));container.set(key,type,JSON.stringify(value,!0))},distance:(source,target,option)=>{"function"==typeof source.location&&(source=source.location()),"function"==typeof target.location&&(target=target.location()),source=$("+").instance(source),target=$("+").instance(target);let x=_.iterable(source)?source[0]:source;x=x instanceof Location||x instanceof Vector;let y=_.iterable(target)?target[0]:target;if(y=y instanceof Location||y instanceof Vector,x&&y)return _.iterable(source)&&_.iterable(target)?source.map(from=>target.map(to=>_.dist(from,to,option))):_.iterable(source)?source.map(from=>_.dist(from,target,option)):_.iterable(target)?target.map(to=>_.dist(source,to,option)):_.dist(source,target,option);throw x?"invalid-target":y?"invalid-source":"invalid-both"},drop:(location,item,option)=>{location=$("+").instance(location),item=$("+").instance(item);let x=_.iterable(location)?location[0]:location;x=x instanceof Location;let y=_.iterable(item)?item[0]:item;if(y=y instanceof ItemStack,x&&y){const method=`dropItem${option?"Naturally":""}`;return _.iterable(location)&&_.iterable(item)?location.map(from=>item.map(to=>from.getWorld()[method](to))):_.iterable(location)?location.map(from=>from.getWorld()[method](item)):_.iterable(item)?item.map(to=>location.getWorld()[method](to)):location.getWorld()[method](item)}throw x?"invald-item":y?"invald-location":"invalid-both"},framework:()=>_,fronts:source=>_.strain($[source],entry=>entry.key===_.lower(entry.key)),instance:(thing,callback)=>{if("object"==typeof thing&&"function"==typeof thing.instance){const output=thing.instance();return"function"==typeof callback?_.iterable(output)?output.map(callback):callback(output):output}return thing},spawn:(location,entity)=>{location=$("+").instance(location),entity=$("+").instance(entity);let x=_.iterable(location)?location[0]:location;x=x instanceof Location;let y=_.iterable(entity)?entity[0]:entity;if(y="string"==typeof y,x&&y)return _.iterable(location)&&_.iterable(entity)?location.map(from=>entity.map(to=>from.getWorld().spawnEntity(from,$.entityType[to]))):_.iterable(location)?location.map(from=>from.getWorld().spawnEntity(from,$.entityType[entity])):_.iterable(entity)?entity.map(to=>location.getWorld().spawnEntity(location,$.entityType[to])):location.getWorld().spawnEntity(location,$.entityType[entity]);throw x?"invald-entity":y?"invald-location":"invalid-both"}});export const receiver=(_,$)=>(type,input,jx)=>{if(_.iterable(input)){const that=jx[type].chainer(input.map(instance=>_.def(instance)?jx[type].wrapper(instance):instance));return that[""]=`jx.${type}ChainerNest@${_.array(8,()=>_.rand.entry("0123456789abcdef")).join("")}`,_.extend(that,{[Symbol.iterator]:(...args)=>input.values(...args)})}{const that=jx[type].chainer([_.def(input)?jx[type].wrapper(input):input],1),slayer=_.object(jx[type].links,link=>({[link]:(...args)=>{const result=that[link](...args);return result===that?slayer:result[0]}}));return slayer[""]=`jx.${type}Chainer@${_.array(8,()=>_.rand.entry("0123456789abcdef")).join("")}`,slayer}};