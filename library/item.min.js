const UUID=Java.type("java.util.UUID"),Material=Java.type("org.bukkit.Material"),ItemFlag=Java.type("org.bukkit.inventory.ItemFlag"),AttributeModifier=Java.type("org.bukkit.attribute.AttributeModifier");export const wrapper=(_,$)=>{const util={adventure:(thing,type)=>{type=_.pascal(type+="ableKeys");const k={get eys(){return thing.meta?_.array(thing.meta[`get${type}`]()):[]}};return _.mirror({get array(){return k.eys.map(key=>key.getKey())},add:value=>{if(value instanceof Material||(value=$("+").fronts("material")[value]),!value)throw"TypeError: That is not a valid material!";thing.meta=meta=>meta&&meta[`set${type}`](_.collect(...k.eys,value.getKey()))},remove:value=>{if(value instanceof Material||(value=$("+").fronts("material")[value]),!value)throw"TypeError: That is not a valid material!";thing.meta=meta=>meta&&meta[`set${type}`](_.collect(...k.eys.filter(key=>value!==key)))},clear:()=>{thing.meta=meta=>meta&&meta[`set${type}`](_.collect())}})},flags:thing=>_.mirror({get array(){return thing.meta?_.array(thing.meta.getItemFlags()).map(flag=>$("+").backs("itemFlag")[flag]):[]},add:value=>{if(value instanceof ItemFlag||(value=$("+").fronts("itemFlag")[value]),!value)throw"TypeError: That is not a valid item flag!";thing.meta=meta=>meta&&meta.addItemFlags([value])},remove:value=>{if(value instanceof ItemFlag||(value=$("+").fronts("itemFlag")[value]),!value)throw"TypeError: That is not a valid item flag!";thing.meta=meta=>meta&&meta.removeItemFlags([value])},clear:()=>{thing.meta=meta=>meta&&meta.removeItemFlags(..._.keys($("+").backs("itemFlag")))}}),modifier:{parse:modifier=>new AttributeModifier(_.uuid(modifier.uuid),modifier.name||"",modifier.amount||0,$.amOperation[modifier.operation||"add_number"],$.equipmentSlot[modifier.slot]||null),serialize:(thing,attribute,modifier)=>{const uuid=modifier.getUniqueId().toString(),update=(key,value)=>{thing.meta=meta=>{meta.removeAttributeModifier(attribute,util.modifier.parse({uuid:uuid})),modifier=util.modifier.parse(_.extend({},internal,{[key]:value})),meta.addAttributeModifier(attribute,modifier)}},internal={get uuid(){return uuid},get amount(){return modifier.getAmount()},set amount(value){update("amount",value)},get name(){return modifier.getName()},set name(value){update("name",value)},get operation(){return $.amOperation[modifier.getOperation()]},set operation(value){update("operation",value)},get slot(){return $.equipmentSlot[modifier.getSlot()]},set slot(value){update("slot",value)}},external={get internal(){return internal},amount:value=>void 0===value?internal.amount:(internal.amount=value,external),name:value=>void 0===value?internal.name:(internal.name=value,external),operation:value=>void 0===value?internal.operation:(internal.operation=value,external),slot:value=>void 0===value?internal.slot:(internal.slot=value,external)};return external}},modifiers:(thing,attribute)=>_.mirror({get array(){if(thing.meta){const modifiers=thing.meta.hasAttributeModifiers()&&thing.meta.getAttributeModifiers(attribute);return[..._.array(modifiers||[])].map(modifier=>_.extend(util.modifier.serialize(thing,attribute,modifier)))}return[]},add:value=>{if("number"==typeof value&&(value={amount:value}),"object"!=typeof value)throw"TypeError: You must supply a numeric value or modifier object!";if("number"!=typeof value.amount)throw"TypeError: That is not a valid modifier object!";thing.meta=meta=>meta&&meta.addAttributeModifier(attribute,util.modifier.parse(value))},remove:value=>{if("string"==typeof value||value instanceof UUID)try{_.uuid(value),value={uuid:value}}catch(error){throw"TypeError: That is not a valid UUID!"}else{if("object"!=typeof value)throw"You must supply a UUID or modifier object!";if(value instanceof AttributeModifier?value={uuid:value.getUniqueID().toString()}:"object"==typeof value.internal&&(value=value.internal),"string"!=typeof value.uuid)throw"TypeError: That is not a valid modifier object!";thing.meta=meta=>meta&&meta.removeAttributeModifier(attribute,util.modifier.parse(value))}},clear:()=>{thing.meta=meta=>meta&&meta.removeAttributeModifier(attribute)}})};return instance=>{const meta=instance.getItemMeta(),thing={get amount(){return instance.getAmount()},set amount(value){if("number"!=typeof value)throw"TypeError: You must supply a numeric value!";instance.setAmount(_.clamp(value,1,127))},get attribute(){return _.define($("+").fronts("attribute"),entry=>meta&&util.modifiers(thing,entry.value))},set attribute(value){if(!_.def(value)||"object"!=typeof value)throw"TypeError: You must supply an object!";meta&&_.extend($(item).attribute(),value)},get damage(){if(meta)return meta.getDamage()},set damage(value){if("number"!=typeof value)throw"TypeError: You must supply a numeric value!";thing.meta=meta=>meta&&meta.setDamage(_.clamp(value,0,instance.getType().getMaxDurability()))},get data(){if(meta)return $("+").data(meta.getPersistentDataContainer())},set data(value){if("object"!=typeof value)throw"TypeError: You must supply an object or null value!";thing.meta=meta=>meta&&$("+").data(meta.getPersistentDataContainer(),value)},get destroy(){return util.adventure(thing,"destroy").get()},set destroy(value){if(!_.iterable(value))throw"TypeError: You must supply an array!";meta&&util.adventure(thing,"destroy").set(value)},drop:(location,option)=>{try{return $("+").drop(location,instance,option)}catch(error){switch(error){case"invalid-both":case"invalid-item":throw"ImpossibleError: How the fuck are you seeing this error!?";case"invalid-location":throw"TypeError: Argument 1 must be a location!"}}},get enchantment(){return _.define($("+").fronts("enchantment"),entry=>{if(meta)return{get:()=>"enchanted_book"===thing.material?meta.getStoredEnchantLevel(entry.value):meta.getEnchantLevel(entry.value),set:value=>{if("number"!=typeof value)throw"TypeError: You must supply a numeric value!";thing.meta=meta=>{value?"enchanted_book"!==thing.material?meta.addEnchant(entry.value,value,!0):meta.addStoredEnchant(entry.value,value,!0):"enchanted_book"===thing.material?meta.removeStoredEnchant(entry.value):meta.removeEnchant(entry.value)}}}})},set enchantment(value){if(!_.def(value)||"object"!=typeof value)throw"TypeError: You must supply an object!";meta&&_.extend($(item).enchantment(),value)},get flag(){return util.flags(thing).get()},set flag(value){if(!_.iterable(value))throw"TypeError: You must supply an array!";meta&&util.flags(thing).set(value)},get instance(){return instance},get lore(){if(meta)return meta.getLore()&&_.array(meta.getLore())},set lore(value){if("function"!=typeof value[Symbol.iterator])throw"You must supply an array or string value!";thing.meta=meta=>meta&&meta.setLore(_.iterable(value)?value:[value])},get material(){return $("+").backs("material")[instance.getType()]},set material(value){const type=value instanceof Material?value:$("+").fronts("material")[value];if(!type)throw"ReferenceError: That is not a valid material!";instance.setType(type)},get meta(){return meta},set meta(value){if("function"!=typeof value)throw"TypeError: You must supply a function!";value(meta),instance.setItemMeta(meta)},get name(){if(meta)return meta.getDisplayName()},set name(value){if("string"!=typeof value)throw"TypeError: You must supply a string value!";thing.meta=meta=>meta&&meta.setDisplayName(value)},get nbt(){return _.serialize(instance.getHandle().getTag())},set nbt(data){try{return instance.getHandle().setTag(_.parse(data))}catch(error){throw"SyntaxError: Cannot convert input to NBT!"}},get place(){return util.adventure(thing,"place").get()},set place(value){if(!_.iterable(value))throw"TypeError: You must supply an array!";meta&&util.adventure(thing,"place").set(value)},get title(){return instance.getI18NDisplayName()},get unbreakable(){if(meta)return meta.isUnbreakable()},set unbreakable(value){if("boolean"!=typeof value)throw"You must supply a boolean value!";thing.meta=meta=>meta&&meta.setUnbreakable(value)}};return thing}};export const parser=(_,$)=>input=>$(`!${input.material}`).amount(input.amount).nbt(input.nbt).instance();export const chain=(_,$)=>({amount:"setter",damage:"setter",data:"appender",destroy:"setter",drop:"runnerLink",enchantment:"setterNest",flags:"setter",instance:"getter",lore:"setter",material:"setter",meta:"setter",modifier:"setter",modifiers:"setterLink",name:"setter",nbt:"appender",place:"setter",serialize:thing=>_.def(thing)?{format:"item",material:thing.material,amount:thing.amount,nbt:thing.nbt}:null,title:"getter",unbreakable:"setter"});