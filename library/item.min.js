export function wrapper(_,API){const util={adventure:(instance,meta,type)=>{const keys=()=>_.array(meta[`${type}ableKeys`]),pascal=_.pascal(type);return _.mirror({get array(){return keys().map(key=>key.getKey())},add:name=>{meta[`set${pascal}ableKeys`](_.collect(...keys(),API.material[name].getKey())),instance.setItemMeta(meta)},remove:name=>{meta[`set${pascal}ableKeys`](_.collect(...keys().filter(key=>`${key}`!==`${API.material[name]}`))),instance.setItemMeta(meta)},clear:()=>{meta[`set${pascal}ableKeys`](_.collect()),instance.setItemMeta(meta)}})},flags:(instance,meta)=>_.mirror({get array(){return _.array(meta.getItemFlags()).map(flag=>_.key(API.itemFlag,flag))},add:flag=>{meta.addItemFlags(API.itemFlag[flag]),instance.setItemMeta(meta)},remove:flag=>{meta.removeItemFlags(API.itemFlag[flag]),instance.setItemMeta(meta)},clear:()=>{meta.removeItemFlags(..._.values(API.itemFlag)),instance.setItemMeta(meta)}}),modifier:{parse:data=>new org.bukkit.attribute.AttributeModifier(_.uuid(data.uuid),"",data.amount,util.operation[data.operation],API.equipmentSlot[data.slot]||null),serialize:data=>({amount:data.getAmount(),operation:_.key(util.operation,data.getOperation()),slot:data.slot?_.key(API.equipmentSlot,data.getSlot()):null,uuid:`${data.getUniqueId()}`})},nbt:{parse:data=>{let compound=void 0;switch(data.type){case"None":return data.value;case"Int":case"Float":case"Double":case"Long":case"Short":case"Byte":case"String":return compound=util.nms("NBTTagCompound"),compound[`set${data.type}`]("x",data.value),compound.get("x");case"End":return null;case"List":case"ByteArray":case"IntArray":const list=util.nms(`NBTTag${data.type}`);return data.value.forEach(entry=>list.add(util.nbt.parse(entry))),list;case"Compound":return compound=util.nms("NBTTagCompound"),_.entries(data.value).forEach(entry=>compound.set(entry.key,util.nbt.parse(entry.value))),compound}},serialize:data=>{if([null,void 0].includes(data))return{type:"None",value:data};{let value=void 0;const type=data.getClass().getCanonicalName().split("NBTTag")[1];switch(type){case"Int":case"Float":case"Double":case"Long":case"Short":case"Byte":value=data.asDouble();break;case"String":value=data.asString();break;case"End":value=null;break;case"List":case"ByteArray":case"IntArray":value=_.array(data).map(util.nbt.serialize);break;case"Compound":value=_.object(_.array(data.map.entrySet()),entry=>({[entry.getKey()]:util.nbt.serialize(entry.getValue())}))}return{type:type,value:value}}}},nms:property=>new(Java.type(`net.minecraft.server.${`${server.getClass()}`.split(".")[3]}.${property}`)),operation:{add:API.amOperation.add_number,multiply_base:API.amOperation.add_scalar,multiply:API.amOperation.multiply_scalar_1}};return instance=>{const item={get amount(){return instance.getAmount()},set amount(value){instance.setAmount(_.clamp(value,1,127))},get attributes(){const meta=instance.getItemMeta();if(meta)return _.define(API.attribute,entry=>_.mirror({get array(){const modifiers=meta.hasAttributeModifiers()&&meta.getAttributeModifiers(entry.value);return[..._.array(modifiers||[])].map(modifier=>util.modifier.serialize(modifier))},add:modifier=>{meta.addAttributeModifier(entry.value,util.modifier.parse(modifier)),instance.setItemMeta(meta)},remove:modifier=>{meta.removeAttributeModifier(entry.value,util.modifier.parse(modifier)),instance.setItemMeta(meta)},clear:()=>{meta.removeAttributeModifier(entry.value),instance.setItemMeta(meta)}}))},set attributes(value){const meta=instance.getItemMeta();meta&&_.keys(API.attribute).forEach(key=>item.attributes[key]=value[key]||[])},get damage(){const meta=instance.getItemMeta();if(meta)return meta.getDamage()},set damage(value){const meta=instance.getItemMeta();meta&&(meta.setDamage(value),instance.setItemMeta(meta))},get data(){const meta=instance.getItemMeta();if(meta){const container=meta.getPersistentDataContainer();return _.object(_.array(container.getRaw().entrySet()),entry=>{const directory=new org.bukkit.NamespacedKey(...entry.getKey().split(":"));if("grakkit"===directory.getNamespace())return{[`${directory.getKey()}`]:_.base.decode(entry.getValue().asString())}})}},set data(value){const meta=instance.getItemMeta();if(meta){const container=meta.getPersistentDataContainer();_.array(container.getRaw().entrySet()).forEach(entry=>{container.remove(new org.bukkit.NamespacedKey(...entry.getKey().split(":")))}),_.entries(value).forEach(entry=>{container.set(new org.bukkit.NamespacedKey("grakkit",entry.key),org.bukkit.persistence.PersistentDataType.STRING,_.base.encode(entry.value))}),instance.setItemMeta(meta)}},get destroys(){const meta=instance.getItemMeta();if(meta)return util.adventure(instance,meta,"destroy").get()},set destroys(value){const meta=instance.getItemMeta();meta&&util.adventure(instance,meta,"destroy").set(value)},get enchantments(){const meta=instance.getItemMeta();if(meta)return _.define(API.enchantment,entry=>({get:()=>"enchanted_book"===item.material?meta.getStoredEnchantLevel(entry.value):meta.getEnchantLevel(entry.value),set:value=>{(value=_.clamp(value,0,32767))>0?"enchanted_book"===item.material?meta.addStoredEnchant(entry.value,value,!0):meta.addEnchant(entry.value,value,!0):"enchanted_book"===item.material?meta.removeStoredEnchant(entry.value):meta.removeEnchant(entry.value),instance.setItemMeta(meta)}}))},set enchantments(value){const meta=instance.getItemMeta();meta&&_.keys(API.enchantment).forEach(key=>item.enchantments[key]=value[key]||0)},get flags(){const meta=instance.getItemMeta();if(meta)return util.flags(instance,meta).get()},set flags(value){const meta=instance.getItemMeta();if(meta)return util.flags(instance,meta).set(value)},get lore(){const meta=instance.getItemMeta();if(meta)return _.array(meta.getLore()||[])},set lore(value){const meta=instance.getItemMeta();meta&&(meta.setLore(value),instance.setItemMeta(meta))},get material(){return _.key(API.material,instance.getType())},set material(value){instance.setType(API.material[value])},get name(){const meta=instance.getItemMeta();if(meta)return meta.getDisplayName()},set name(value){const meta=instance.getItemMeta();meta&&(meta.setDisplayName(value),instance.setItemMeta(meta))},get nbt(){return util.nbt.serialize(instance.getHandle().getTag())},set nbt(data){instance.getHandle().setTag(util.nbt.parse(data))},get places(){const meta=instance.getItemMeta();if(meta)return util.adventure(instance,meta,"place").get()},set places(value){const meta=instance.getItemMeta();meta&&util.adventure(instance,meta,"place").set(value)},get title(){return instance.getI18NDisplayName()},get unbreakable(){const meta=instance.getItemMeta();if(meta)return meta.isUnbreakable()},set unbreakable(value){const meta=instance.getItemMeta();meta&&(meta.setUnbreakable(value),instance.setItemMeta(meta))}};return item}}export function chainer(_,API){const util_modifiers=set=>({clear:()=>{set.clear()},add:(amount,operation,slot)=>{set.add({amount:amount,operation:operation||"add_number",slot:slot})},remove:index=>{set.remove(modifiers[index])}});return(...items)=>{const that={amount:(...args)=>void 0===args[0]?items.map(item=>item.amount):(items.map(item=>item.amount=args[0]),that),attribute:(...args)=>void 0===args[0]?items.map(item=>item.attributes):void 0===args[1]?items.map(item=>item.attributes[args[0]]):(items.map(item=>{const modifiers=util_modifiers(item.attributes[args[0]]);"function"==typeof args[1]?args[1](modifiers):(modifiers.clear(),args.slice(1).forEach(arg=>modifiers.add(...arg)))}),that),damage:(...args)=>void 0===args[0]?items.map(item=>item.damage):(items.map(item=>item.damage=args[0]),that),data:(...args)=>void 0===args[0]?items.map(item=>item.data):(items.map(item=>{const data=item.data;"function"==typeof args[0]?(args[0](data),item.data=data):item.data=args[0]}),that),destroy:(...args)=>void 0===args[0]?items.map(item=>item.destroys):(items.map(item=>{"function"==typeof args[0]?args[0](item.destroys):(item.destroys.clear(),args.forEach(item.destroys.add))}),that),enchantment:(...args)=>void 0===args[0]?items.map(item=>item.enchantments):void 0===args[1]?items.map(item=>item.enchantments[args[0]]):(items.map(item=>item.enchantments[args[0]]=args[1]),that),flag:(...args)=>void 0===args[0]?items.map(item=>item.flags):(items.map(item=>{"function"==typeof args[0]?args[0](item.flags):(item.flags.clear(),args.forEach(item.flags.add))}),that),lore:(...args)=>void 0===args[0]?items.map(item=>item.lore):(items.map(item=>item.lore=args[0]),that),material:(...args)=>void 0===args[0]?items.map(item=>item.material):(items.map(item=>item.material=args[0]),that),name:(...args)=>void 0===args[0]?items.map(item=>item.name):(items.map(item=>item.name=args[0]),that),nbt:(...args)=>void 0===args[0]?items.map(item=>item.nbt):(items.map(item=>{const nbt=item.nbt;"function"==typeof args[0]?(args[0](nbt),item.nbt=nbt):item.nbt=args[0]}),that),place:(...args)=>void 0===args[0]?items.map(item=>item.places):(items.map(item=>{"function"==typeof args[0]?args[0](item.places):(item.places.clear(),args.forEach(item.places.add))}),that),title:()=>items.map(item=>item.title),unbreakable:(...args)=>void 0===args[0]?items.map(item=>item.unbreakable):(items.map(item=>item.unbreakable=args[0]),that)};return that}}export const links=["amount","attribute","damage","data","destroy","enchantment","flag","lore","material","nbt","name","place","title","unbreakable"];