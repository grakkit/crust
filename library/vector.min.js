const World=Java.type("org.bukkit.World"),Vector=Java.type("org.bukkit.util.Vector"),Location=Java.type("org.bukkit.Location");export const wrapper=(_,$)=>instance=>{const thing={add:(x,y,z,source)=>{if(!_.def(z))throw"TypeError: You must specify at least 3 numeric arguments!";if(_.def(source)){if("function"==typeof(source=$("+").instance(source)).getLocation&&(source=source.getLocation()),!(source instanceof Location))throw"TypeError: Argument 4 must be a location or have a location attached!";{const local=new Vector(x,y,z);local.rotateAroundX(source.getPitch()*Math.PI/180),local.rotateAroundY(source.getYaw()*Math.PI/180*-1),x=local.getX(),y=local.getY(),z=local.getZ()}}thing.x+=x,thing.y+=y,thing.z+=z},distance:(target,option)=>{try{return $("+").distance(instance,target,option)}catch(error){switch(error){case"invalid-both":case"invalid-source":throw"ImpossibleError: How the fuck are you seeing this error!?";case"invalid-target":throw"TypeError: Argument 1 must be a location, vector, or have a location or vector attached!"}}},get instance(){return instance},location:(world,yaw,pitch)=>{if(_.def(world)){if(world instanceof World||(world=server.getWorld(world)),_.def(world))return instance.toLocation(world,yaw||0,pitch||0);throw"ReferenceError: That world does not exist!"}throw"TypeError: You must specify a world, world name or UUID!"},get x(){return instance.getX()},set x(value){if("number"!=typeof value)throw"TypeError: You must supply a numeric value!";instance.setX(value)},get y(){return instance.getY()},set y(value){if("number"!=typeof value)throw"TypeError: You must supply a numeric value!";instance.setY(value)},get z(){return instance.getZ()},set z(value){if("number"!=typeof value)throw"TypeError: You must supply a numeric value!";instance.setZ(value)}};return thing};export const parser=(_,$)=>thing=>new Vector(thing.x,thing.y,thing.z);export const chain=(_,$)=>({add:"voider",distance:"runner",instance:"getter",location:"runnerLink",serialize:thing=>({format:"vector",x:thing.x,y:thing.y,z:thing.z}),x:"setter",y:"setter",z:"setter"});