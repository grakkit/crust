const World=Java.type("org.bukkit.World"),Vector=Java.type("org.bukkit.util.Vector"),Location=Java.type("org.bukkit.Location"),Material=Java.type("org.bukkit.Material");export const wrapper=(_,$)=>instance=>{const thing={get block(){return instance.getBlock()},distance:(target,option)=>{try{return $("+").distance(instance,target,option)}catch(error){switch(error){case"invalid-both":case"invalid-source":throw"ImpossibleError: How the fuck are you seeing this error!?";case"invalid-target":throw"Argument 1 must be a location, vector, or have a location or vector attached!"}}},drop:(item,option)=>{try{return $("+").drop(instance,item,option)}catch(error){switch(error){case"invalid-both":case"invalid-location":throw"ImpossibleError: How the fuck are you seeing this error!?";case"invalid-item":throw"TypeError: Argument 1 must be an item!"}}},get instance(){return instance},get pitch(){return instance.getPitch()},set pitch(value){if("number"!=typeof value)throw"TypeError: You must supply a numeric value!";instance.setPitch(value)},spawn:(lifeform,option)=>{try{return $("+").spawn(instance,lifeform,option)}catch(error){switch(error){case"invalid-both":case"invalid-location":throw"ImpossibleError: How the fuck are you seeing this error!?";case"invalid-lifeform":throw"TypeError: Argument 1 must be an item!"}}},get vector(){return instance.toVector()},set vector(value){if(!((value=$("+").instance(value))instanceof Vector))throw"TypeError: You must supply a vector!";thing.x=value.getX(),thing.y=value.getY(),thing.z=value.getZ()},get world(){return instance.getWorld()},set world(value){if(value instanceof World||(value=server.getWorld(value)),_.def(value))return instance.setWorld(value);throw"ReferenceError: That world does not exist!"},get x(){return instance.getX()},set x(value){if("number"!=typeof value)throw"TypeError: You must supply a numeric value!";instance.setX(value)},get y(){return instance.getY()},set y(value){if("number"!=typeof value)throw"TypeError: You must supply a numeric value!";instance.setY(value)},get yaw(){return instance.getYaw()},set yaw(value){if("number"!=typeof value)throw"TypeError: You must supply a numeric value!";instance.setYaw(value)},get z(){return instance.getZ()},set z(value){if("number"!=typeof value)throw"TypeError: You must supply a numeric value!";instance.setZ(value)}};return thing};export const parser=(_,$)=>thing=>new Location(server.getWorld(_.uuid(thing.world)),thing.x,thing.y,thing.z,thing.yaw,thing.pitch);export const chain=(_,$)=>({block:"getterLink",distance:"runner",drop:"runnerLink",instance:"getter",pitch:"setter",serialize:thing=>_.def(thing)?{format:"location",pitch:thing.pitch,world:thing.world.getUID().toString(),x:thing.x,y:thing.y,yaw:thing.yaw,z:thing.z}:null,spawn:"runnerLink",vector:"setterLink",world:"setter",x:"setter",y:"setter",yaw:"setter",z:"setter"});