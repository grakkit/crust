const EquipmentSlot = Java.type('org.bukkit.inventory.EquipmentSlot'),
   AttributeModifier = Java.type('org.bukkit.attribute.AttributeModifier');
export const wrapper = (_, $) => (instance) => {
   const thing = {
      get amount () {
         return instance.getAmount();
      },
      set amount (value) {
         if ('number' != typeof value) throw 'TypeError: You must supply a numeric value!';
         instance = $(Object.assign($(instance).serialize(), { amount: value })).instance();
      },
      get instance () {
         return instance;
      },
      get operation () {
         return $('+').backs('amOperation')[instance.getOperation()];
      },
      set operation (value) {
         if (
            ('string' == typeof value && (value = $('+').fronts('amOperation')[value]),
            !(value instanceof AttributeModifier.Operation))
         )
            throw 'TypeError: That equipment slot is invalid!';
         instance = $(Object.assign($(instance).serialize(), { operation: value })).instance();
      },
      get slot () {
         const slot = instance.getSlot();
         return _.def(slot) ? $('+').backs('equipmentSlot')[slot] : null;
      },
      set slot (value) {
         if (
            ('string' == typeof value && (value = $('+').fronts('equipmentSlot')[value]),
            !(value instanceof EquipmentSlot || null === value))
         )
            throw 'TypeError: That equipment slot is invalid!';
         instance = $(Object.assign($(instance).serialize(), { slot: value })).instance();
      },
      get uuid () {
         return instance.getUniqueId().toString();
      }
   };
   return thing;
};
export const parser = (_, $) => (thing) =>
   $(
      new AttributeModifier(
         _.uuid(thing.uuid),
         '',
         thing.amount,
         $('+').fronts('amOperation')[thing.operation],
         _.def(thing.slot) ? $('+').fronts('equipmentSlot')[thing.slot] : null
      )
   );
export const chain = (_, $) => ({
   amount: 'setter',
   instance: 'getter',
   operation: 'setter',
   serialize: (thing) =>
      _.def(thing)
         ? { format: 'modifier', uuid: thing.uuid, amount: thing.amount, operation: thing.operation, slot: thing.slot }
         : thing,
   slot: 'setter',
   uuid: 'getter'
});
