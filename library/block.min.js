export function wrapper(_,$){return instance=>{const util_key=(...args)=>new(Java.type("org.bukkit.NamespacedKey"))(...args),block={get data(){const state=instance.getState();if(state instanceof Java.type("org.bukkit.block.TileState")){const container=state.getPersistentDataContainer();return _.object(_.array(container.getRaw().entrySet()),entry=>{const directory=util_key(...entry.getKey().split(":"));if(directory.getNamespace()===core.plugin.getName()){let value=_.base.decode(entry.getValue().asString());try{return{[`${directory.getKey()}`]:JSON.parse(value)}}catch(error){return{[`${directory.getKey()}`]:value}}}})}},set data(value){const state=instance.getState();if(state instanceof Java.type("org.bukkit.block.TileState")){const container=state.getPersistentDataContainer();_.array(container.getRaw().entrySet()).forEach(entry=>{value.getNamespace()===core.plugin.getName()&&container.remove(util_key(core.plugin,entry.getKey().getKey()))}),_.entries(value).forEach(entry=>{container.set(util_key(core.plugin,entry.key),org.bukkit.persistence.PersistentDataType.STRING,_.base.encode(JSON.stringify(core.serialize(entry.value))))}),state.update(!0)}},distance:(target,flat)=>_.dist(block.location,target,flat),drops:item=>{const drops=instance.getDrops(item&&item.instance&&item.instance()||item);return 0===drops.length?null:drops},get facing(){const data=instance.getBlockData();if(data instanceof Java.type("org.bukkit.block.data.Directional"))return _.key($.blockFace,data.getFacing())},set facing(value){const data=instance.getBlockData();data instanceof Java.type("org.bukkit.block.data.Directional")&&(data.setFacing($.blockFace[value]),instance.setBlockData(data))},instance:()=>blocks.map(blocks=>blocks.instance),get location(){return instance.getLocation()},get material(){return _.key($.material,instance.getType())},set material(value){instance.setType($.material[value])},get world(){return instance.getLocation().getWorld()}};return block}}export function chainer(_,$){return(...blocks)=>{const that={data:(...args)=>void 0===args[0]?blocks.map(block=>block.data):(blocks.map(block=>{const data=block.data;"function"==typeof args[0]?(args[0](data),block.data=data):block.data=args[0]}),that),distance:(...args)=>blocks.map(block=>block.distance(...args)),drops:(...args)=>blocks.map(block=>block.drops(...args)),facing:(...args)=>void 0===args[0]?blocks.map(block=>block.facing):(blocks.map(block=>block.facing=args[0]),that),location:()=>blocks.map(block=>block.location),material:(...args)=>void 0===args[0]?blocks.map(block=>block.material):(blocks.map(block=>block.material=args[0]),that),serialize:()=>({}),world:()=>blocks.map(block=>block.world)};return that}}export function parser(_,$){return()=>{}}export const links=["data","distance","drops","facing","location","material","serialize","world"];