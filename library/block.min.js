export function wrapper(_,API){return instance=>{const block={get data(){const state=instance.getState();if(state instanceof Java.type("org.bukkit.block.TileState")){const container=state.getPersistentDataContainer();return _.object(_.array(container.getRaw().entrySet()),entry=>{const directory=new org.bukkit.NamespacedKey(...entry.getKey().split(":"));if("grakkit"===directory.getNamespace())return{[`${directory.getKey()}`]:_.base.decode(entry.getValue().asString())}})}},set data(value){const state=instance.getState();if(state instanceof Java.type("org.bukkit.block.TileState")){const container=state.getPersistentDataContainer();_.array(container.getRaw().entrySet()).forEach(entry=>{container.remove(new org.bukkit.NamespacedKey(...entry.getKey().split(":")))}),_.entries(value).forEach(entry=>{container.set(new org.bukkit.NamespacedKey("grakkit",entry.key),org.bukkit.persistence.PersistentDataType.STRING,_.base.encode(entry.value))}),state.update(!0)}},distance:(target,flat)=>{_.dist(block.location(),target,flat)},get facing(){const data=instance.getBlockData();if(data instanceof Java.type("org.bukkit.block.data.Directional"))return _.key($.blockFace,data.getFacing())},set facing(value){const data=instance.getBlockData();data instanceof Java.type("org.bukkit.block.data.Directional")&&(data.setFacing($.blockFace[value]),instance.setBlockData(data))},get location(){return instance.getLocation()},get material(){return _.key($.material,instance.getType())},set material(value){instance.setType($.material[value])}};return block}}export function chainer(_,API){return(...blocks)=>{const that={data:(...args)=>void 0===args[0]?blocks.map(block=>block.data):(blocks.map(block=>{const data=block.data;"function"==typeof args[0]?(args[0](data),block.data=data):block.data=args[0]}),that),distance:(...args)=>blocks.map(block=>block.distance(...args)),facing:(...args)=>void 0===args[0]?blocks.map(block=>block.facing):(blocks.map(block=>block.facing=args[0]),that),location:(...args)=>blocks.map(block=>block.location),material:(...args)=>void 0===args[0]?blocks.map(block=>block.material):(blocks.map(block=>block.material=args[0]),that),serialize:(...args)=>({})};return that}}export function parser(_,API){return()=>{}}export const links=["data","distance","facing","location","material","serialize"];