const UUID=Java.type("java.util.UUID"),Sound=Java.type("org.bukkit.Sound"),World=Java.type("org.bukkit.World"),Entity=Java.type("org.bukkit.entity.Entity"),Player=Java.type("org.bukkit.entity.Player"),Vector=Java.type("org.bukkit.util.Vector"),Location=Java.type("org.bukkit.Location"),ItemStack=Java.type("org.bukkit.inventory.ItemStack"),LivingEntity=Java.type("org.bukkit.entity.LivingEntity"),Attributable=Java.type("org.bukkit.attribute.Attributable"),NamespacedKey=Java.type("org.bukkit.NamespacedKey"),TextComponent=Java.type("net.md_5.bungee.api.chat.TextComponent"),ChatMessageType=Java.type("net.md_5.bungee.api.ChatMessageType"),InventoryHolder=Java.type("org.bukkit.inventory.InventoryHolder"),util={attribute:{max_health:[0,1024],follow_range:[0,2048],knockback_resistance:[0,1],movement_speed:[0,1024],attack_damage:[0,2048],armor:[0,30],armor_toughness:[0,20],attack_knockback:[0,5],attack_speed:[0,1024],luck:[-1024,1024],jump_strength:[0,2],flying_speed:[0,1024],spawn_reinforcements:[0,1]},equipment:{chest:"chestplate",feet:"boots",hand:"itemInMainHand",head:"helmet",legs:"leggings",off_hand:"itemInOffHand"},notes:[.5,.52972412109375,.56121826171875,.5945892333984375,.6299591064453125,.6674199270850172,.7071067811865476,.7491535384383408,.7937005259840997,.8408964152537145,.8908987181403393,.9438743126816934,1,1.0594630943592953,1.122462048309373,1.189207115002721,1.2599210498948732,1.3348398541700344,1.4142135623730951,1.4983070768766815,1.5874010519681996,1.681792830507429,1.7817974362806785,1.887748625363387,2]};export const wrapper=(_,$)=>instance=>{const alive=instance instanceof LivingEntity,attributable=instance instanceof Attributable,player=instance instanceof Player,inventory=instance instanceof InventoryHolder,thing={get ai(){if(alive)return instance.hasAI()},set ai(value){alive&&instance.setAI(value)},get attributes(){return _.define($("+").fronts("attribute"),entry=>{if(attributable){const attribute=instance.getAttribute(entry.value);if(attribute)return{get:()=>attribute.getBaseValue(),set:value=>{if(null!==value&&"number"!=typeof value)throw"You must supply a null value or a numeric value!";_.def(value)||(value=attribute.getDefaultValue()),attribute.setBaseValue(_.clamp(value,...util.attribute[entry.key]))}}}})},set attributes(value){if("object"!=typeof value)throw"You must supply an object or a null value!";value||(value={});try{_.keys($("+").fronts("attribute")).forEach(key=>thing.attribute[key]=value[key]||null)}catch(error){throw"That input contains invalid entries!"}},bar:key=>{try{"string"==typeof key&&(key=new NamespacedKey(...key.split(":")))}catch(value){throw"SyntaxError: Could not convert string into namespaced key!"}if(!(key instanceof NamespacedKey))throw"TypeError: You must supply a string value or a namespaced key!";if(player){let bar=server.getBossBar(key);return bar||(bar=server.createBossBar(key,"",$.barColor.white,$.barStyle.solid),bar.addPlayer(instance)),bar}},get bars(){if(player)return _.array(server.getBossBars())},set bars(value){if(!_.iterable(value))throw"TypeError: You must supply an array of namespaced keys!";{const input=value.map(key=>{try{return key instanceof NamespacedKey?key:new NamespacedKey(...key.split(":"))}catch(error){throw"TypeError: That array contains invalid namespaced keys!"}});player&&thing.bars.forEach(bar=>bar.removePlayer(instance)),player&&input.forEach(key=>server.getBossBar(key).addPlayer(instance))}},get block(){return instance.getLocation().getBlock()},get collidable(){if(alive)return instance.isCollidable()},set collidable(value){if("boolean"!=typeof value)throw"TypeError: You must supply a boolean value!";alive&&instance.setCollidable(value)},get data(){return $("+").data(instance.getPersistentDataContainer())},set data(value){if("object"!=typeof value)throw"TypeError: You must supply an object or null value!";$("+").data(instance.getPersistentDataContainer(),value)},distance:(target,option)=>{try{return $("+").distance(instance.getLocation(),target,option)}catch(error){switch(error){case"invalid-both":case"invalid-source":throw"ImpossibleError: How the fuck are you seeing this error!?";case"invalid-target":throw"TypeError: Argument 1 must be a location, vector, or have a location or vector attached!"}}},get effect(){return _.define($("+").fronts("peType"),entry=>{if(alive)return{get:()=>{const effect=instance.getPotionEffect(entry.value);return effect?{duration:effect.getDuration(),amplifier:effect.getAmplifier()+1}:null},set:value=>{if("object"!=typeof value)throw"TypeError: You must supply an object or a null value!";{value||(value={});const duration=_.clamp(value.duration||0,0,2147483647),amplifier=_.clamp(value.amplifier||0,0,255);duration>0&&amplifier>0?instance.addPotionEffect(entry.value.createEffect(duration,amplifier-1),!0):instance.removePotionEffect(entry.value)}}}})},set effect(value){if("object"!=typeof value)throw"TypeError: You must supply an object or a null value!";value||(value={});try{_.keys($("+").fronts("peType")).forEach(key=>thing.effect[key]=value[key]||null)}catch(error){throw"TypeError: That input contains invalid entries!"}},get equipment(){return _.define($("+").fronts("equipmentSlot"),entry=>{if(alive){const slot=util.equipment[entry.key],pascal=_.pascal(slot);return{get:()=>instance.getEquipment()[`get${pascal}`](),set:value=>{if(!(null===(value=$("+").instance(value))||value instanceof ItemStack))throw"TypeError: You must supply an item stack or a null value!";instance.getEquipment()[`set${pascal}`](value)}}}})},set equipment(value){if("object"!=typeof value)throw"TypeError: You must supply an object or a null value!";value||(value={});try{_.keys($("+").fronts("equipmentSlot")).forEach(key=>thing.equipment[key]=value[key]||null)}catch(error){throw"TypeError: That input contains invalid entries!"}},get experience(){if(player)return instance.getExp()},set experience(value){if("number"!=typeof value)throw"TypeError: You must supply a numeric value!";player&&instance.setExp(value)},get food(){if(player)return instance.getFoodLevel()},set food(value){if("number"!=typeof value)throw"TypeError: You must supply a numeric value!";player&&instance.setFoodLevel(value)},get glowing(){return instance.isGlowing()},set glowing(value){if("boolean"!=typeof value)throw"TypeError: You must supply a boolean value!";instance.setGlowing(value)},get health(){if(alive)return instance.getHealth()},set health(value){if("number"!=typeof value)throw"TypeError: You must supply a numeric value!";alive&&instance.setHealth(_.clamp(value,0,instance.getMaxHealth()))},get instance(){return instance},get inventory(){if(inventory)return[...instance.getInventory()]},set inventory(value){if(null===value&&(value=[]),!_.iterable(value))throw"TypeError: You must supply an array or a null value!";value=value.map(item=>{if(null===item)return item;if((item=$("+").instance(item))instanceof ItemStack)return item;throw"TypeError: That array contains invalid items!"}),inventory&&instance.getInventory().setContents(value)},get invulnerable(){return instance.isInvulnerable()},set invulnerable(value){if("boolean"!=typeof value)throw"TypeError: You must supply a boolean value!";instance.setInvulnerable(value)},get item(){return instance.getItemInHand()},set item(value){if(!(null===(value=$("+").instance(value))||value instanceof ItemStack))throw"TypeError: You must supply an item stack or a null value!";instance.setItemInHand(value)},get level(){if(player)return instance.getLevel()},set level(value){if("number"!=typeof value)throw"TypeError: You must supply a numeric value!";player&&instance.setLevel(value)},get lifeform(){return $("+").backs("entityType")[instance.getType()]},get location(){return instance.getLocation()},set location(value){if("function"==typeof(value=$("+").instance(value)).getLocation&&(value=value.getLocation()),value instanceof Vector&&(value=value.toLocation(thing.world)),!(value instanceof Location))throw"TypeError: You must specify a location, vector, or object with a location or vector attached!";instance.teleport(value)},get mode(){if(player)return $("+").backs("gameMode")[instance.getGameMode()]},set mode(value){player&&instance.setGameMode($("+").fronts("gameMode")[value])},get name(){return player?instance.getDisplayName():instance.getCustomName()},set name(value){if("string"!=typeof value&&null!==value)throw"TypeError: You must specify a string value or a null value!";_.def(value)&&(value="Â§r"+value),player?(instance.setDisplayName(value),instance.setPlayerListName(value)):(instance.setCustomName(value),instance.setCustomNameVisible(null!==value))},get nbt(){return _.serialize(instance.getHandle().save(new _.nms.NBTTagCompound))},set nbt(value){instance.getHandle().load(_.parse(value))},note:(sound,pitch,options)=>{thing.sound(sound,Object.assign(options||{},{pitch:util.notes[pitch||0]}))},get op(){if(player)return instance.isOp()},set op(value){if("boolean"!=typeof value)throw"TypeError: You must supply a boolean value!";player&&instance.setOp(value)},get passengers(){return $(_.array(instance.getPassengers()))},set passengers(value){if(!_.iterable(value))throw"TypeError: You must supply an array of entities!";{const input=value.map(entity=>{if(entity instanceof UUID&&(entity=server.getEntity(entity)),entity instanceof Entity)return entity;throw"TypeError: That array contains invalid entity entries!"});instance.getPassengers().forEach(entity=>instance.removePassenger(entity)),input.forEach(entity=>instance.addPassenger(entity))}},get player(){if(player)return _.player(instance)},remove:()=>{player?instance.kickPlayer(""):instance.remove()},get saturation(){if(player)return instance.getSaturation()},set saturation(value){if("number"!=typeof value)throw"TypeError: You must supply a numeric value!";player&&instance.setSaturation(value)},get silent(){return instance.isSilent()},set silent(value){if("boolean"!=typeof value)throw"TypeError: You must supply a boolean value!";instance.setSilent(value)},get sneaking(){if(player)return instance.isSneaking()},set sneaking(value){if("boolean"!=typeof value)throw"TypeError: You must supply a boolean value!";player&&instance.setSneaking(value)},sound:(noise,options)=>{if(noise instanceof Sound||(noise=$("+").fronts("sound")[noise]),!_.def(noise))throw"TypeError: That sound does not exist!";if(options||(options={}),options.location){const value=options.location;if(value=$("+").instance(value),"function"==typeof value.getLocation&&(value=value.getLocation()),value instanceof Vector&&(value=value.toLocation(thing.world)),!(value instanceof Location))throw"TypeError: The location you specified in your options was invalid!";options.location=value}if(options.category){const value=options.category;if(value instanceof SoundCategory||(value=$("+").fronts("soundCategory")[value]),!_.def(value))throw"TypeError: The sound category you specified in your options was invalid!";options.category=value}if(_.def(options.volume)&&"number"!=typeof options.volume)throw"TypeError: The volume level you specified in your options was invalid!";if(_.def(options.pitch)&&"number"!=typeof options.pitch)throw"TypeError: The pitch value you specified in your options was invalid!";player&&instance.playSound(options.location||instance.getLocation(),noise,options.category||$.soundCategory.master,_.def(options.volume)?options.volume:1,_.def(options.pitch)?options.pitch:1)},get tags(){return _.array(instance.getScoreboardTags())},set tags(value){if(!_.iterable(value))throw"TypeError: You must supply an array of string values!";{const input=value.map(entry=>{if("string"==typeof entry)return entry;throw"TypeError: That array contains a non-string value!"});instance.getScoreboardTags().clear(),input.map(entry=>instance.getScoreboardTags().add(entry))}},text:(message,type,raw)=>{if(player)switch("boolean"==typeof type&&(raw=type),raw||(message=_.color(message)),type){case"action":instance.sendMessage(ChatMessageType.ACTION_BAR,new TextComponent(message));break;case"title":instance.sendTitle(...message.split("\n"),10,70,20);break;case"chat":case"standard":case"text":case void 0:instance.sendMessage(message);break;default:throw"TypeError: That is not a valid message type!"}},get uuid(){return instance.getUniqueId().toString()},get vector(){return thing.location.toVector()},set vector(value){if("function"==typeof(value=$("+").instance(value)).getLocation&&(value=value.getLocation()),!(value instanceof Vector||value instanceof Location))throw"TypeError: You must specify a location, vector, or object with a location or vector attached!";thing.location=$(thing.location).x(value.getX()).y(value.getY()).z(value.getZ())},get velocity(){return instance.getVelocity()},set velocity(value){if("function"==typeof(value=$("+").instance(value)).getLocation&&(value=value.getLocation()),value instanceof Location&&(value=value.toVector()),!(value instanceof Vector))throw"TypeError: You must specify a location, vector, or object with a location or vector attached!";instance.setVelocity(value)},get vitality(){if(alive)return instance.getMaxHealth()},set vitality(value){if("number"!=typeof value)throw"TypeError: You must supply a numeric value!";alive&&instance.setMaxHealth(value)},get world(){return instance.getLocation().getWorld()},set world(world){if(_.def(world)){if(world instanceof World||(world=server.getWorld(world)),_.def(world))return instance.teleport(world.getSpawnLocation());throw"ReferenceError: That world does not exist!"}throw"TypeError: You must specify a world, world name or UUID!"}};return thing};export const parser=(_,$)=>input=>$(`?${input.lifeform}`,$(input.location)).nbt(input.nbt).instance();export const chain=(_,$)=>({ai:"setter",attributes:"setterNest",bar:"runnerLink",bars:"setterLink",block:"getterLink",collidable:"setter",data:"appender",distance:"runner",effect:"setterNest",equipment:"setterLinkNest",experience:"setter",glowing:"setter",health:"setter",instance:"getter",inventory:"setterLink",invulnerable:"setter",item:"setterLink",jumping:"getter",level:"setter",lifeform:"getter",location:"setterLink",mode:"setter",name:"setter",nbt:"appender",note:"runner",op:"setter",passengers:"setter",player:"getter",remove:"voider",serialize:thing=>_.def(thing)?{format:"entity",lifeform:thing.lifeform,location:thing.location,nbt:data.nbt}:null,silent:"setter",sneaking:"getter",sound:"voider",tags:"setter",text:"voider",uuid:"getter",vector:"appenderLink",velocity:"appenderLink",vitality:"setter",world:"setter"});