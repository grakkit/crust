const Note=Java.type("org.bukkit.Note"),Player=Java.type("org.bukkit.entity.Player"),LivingEntity=Java.type("org.bukkit.entity.LivingEntity"),Attributable=Java.type("org.bukkit.attribute.Attributable"),NamespacedKey=Java.type("org.bukkit.NamespacedKey"),TextComponent=Java.type("net.md_5.bungee.api.chat.TextComponent"),ChatMessageType=Java.type("net.md_5.bungee.api.ChatMessageType"),InventoryHolder=Java.type("org.bukkit.inventory.InventoryHolder"),PersistentDataType=Java.type("org.bukkit.persistence.PersistentDataType");export const wrapper=(_,$)=>{const util={attribute:{max_health:[0,1024],follow_range:[0,2048],knockback_resistance:[0,1],movement_speed:[0,1024],attack_damage:[0,2048],armor:[0,30],armor_toughness:[0,20],attack_knockback:[0,5],attack_speed:[0,1024],luck:[-1024,1024],jump_strength:[0,2],flying_speed:[0,1024],spawn_reinforcements:[0,1]},bar:bar=>{const internal={get key(){return bar.getKey().getKey()},get title(){return bar.getTitle()},set title(value){bar.setTitle(value)},get progress(){return bar.getProgress()},set progress(value){bar.setProgress(value)},get color(){return $.barColor[bar.getColor()]},set color(value){bar.setColor($.barColor[value])},get style(){return $.barStyle[bar.getStyle()]},set style(value){bar.setStyle($.barStyle[value])},get flags(){return util.flags(bar).get()},set flags(value){util.flags(bar).set(value)}},that={get internal(){return internal},title:value=>void 0===value?internal.title:(internal.title=value,that),progress:value=>void 0===value?internal.progress:(internal.progress=value,that),color:value=>void 0===value?internal.color:(internal.color=value,that),style:value=>void 0===value?internal.style:(internal.style=value,that),flags:(...args)=>void 0===args[0]?internal.flags:("function"==typeof args[0]?args[0](internal.flags):internal.flags=args,that)};return that},bars:instance=>{const uuid=instance.getUniqueId().toString();return _.mirror({get array(){return _.array(server.getBossBars()).filter(bar=>bar.getKey().getNamespace()===core.plugin.getName()).filter(bar=>bar.getKey().getKey().split("/")[0]===uuid).map(util.bar)},add:value=>{if("string"==typeof value&&(value={name:value}),"object"==typeof value){if("number"==typeof value.amount){const key=new NamespacedKey(core.plugin,`${uuid}/${value.name}`);let bar=server.getBossBar(key);return bar||(bar=server.createBossBar(key,"",$.barColor.white,$.barStyle.solid),Object.assign(util.bar(bar),{title:value.title||"",progress:value.progress||0,color:value.color||"white",style:value.style||"solid",flags:value.flags||[]})),bar}throw"TypeError: That is not a valid boss bar object!"}throw"TypeError: You must supply a string value or boss bar object!"},delete:value=>{const bar=server.getBossBar(new NamespacedKey(core.plugin,`${uuid}/${value.internal.name}`));bar&&(bar.removePlayer(instance),server.removeBossBar(bar.getKey()))},clear:()=>{_.array(server.getBossBars()).filter(bar=>bar.getKey().getNamespace()===core.plugin.getName()).filter(bar=>bar.getKey().getKey().split("/")[0]===uuid).forEach(bar=>{bar.removePlayer(instance),server.removeBossBar(bar.getKey())})},get:(bars,input)=>bars.filter(bar=>bar.internal.key.split("/")[1]===input)[0]})},equipment:{chest:"chestplate",feet:"boots",hand:"itemInMainHand",head:"helmet",legs:"leggings",off_hand:"itemInOffHand"},flags:bar=>_.mirror({get array(){const output=[];return util.remap($.barFlag,entry=>bar.hasFlag(entry.value)&&output.push(entry.key)),output},add:value=>{bar.addFlag($.barFlag[value])},remove:value=>{bar.removeFlag($.barFlag[value])},clear:()=>{util.remap($.barFlag,entry=>bar.removeFlag(entry.value))}}),passengers:instance=>_.mirror({get array(){return _.array(instance.getPassengers()).map(passenger=>$(passenger))},add:value=>{instance.addPassenger($(":standardize",value))},delete:value=>{instance.removePassenger($(":standardize",value))},clear:()=>{instance.eject()}}),remap:(source,consumer)=>_.define(source,entry=>{if(entry.key===_.lower(entry.key))return consumer(entry)}),tags:instance=>_.mirror({get array(){return _.array(instance.getScoreboardTags())},add:value=>{instance.getScoreboardTags().add(value)},remove:value=>{instance.getScoreboardTags().remove(value)},clear:()=>{instance.getScoreboardTags().clear()}})};return instance=>{const alive=instance instanceof LivingEntity,attributable=instance instanceof Attributable,player=instance instanceof Player,inventory=instance instanceof InventoryHolder,thing={get ai(){if(alive)return instance.hasAI()},set ai(value){alive&&instance.setAI(value)},get attribute(){return _.define($("+").fronts("attribute"),entry=>{if(attributable){const attribute=instance.getAttribute(entry.value);if(attribute)return{get:()=>attribute.getBaseValue(),set:value=>{if(null!==value&&"number"!=typeof value)throw"You must supply a null value or a numeric value!";_.def(value)||(value=attribute.getDefaultValue()),attribute.setBaseValue(_.clamp(value,...util.attribute[entry.key]))}}}})},set attribute(value){if("object"!=typeof value)throw"You must supply an object or a null value!";value||(value={});try{_.keys($("+").fronts("attribute")).forEach(key=>thing.attribute[key]=value[key]||null)}catch(error){throw"That input contains invalid entries!"}},get bar(){if(player)return util.bars(instance).get()},set bar(value){player&&util.bars(instance).set(value)},get block(){return instance.getLocation().getBlock()},get collidable(){if(alive)return instance.isCollidable()},set collidable(value){if("boolean"!=typeof value)throw"You must supply a boolean value!";alive&&instance.setCollidable(value)},get data(){return $("+").data(instance.getPersistentDataContainer())},set data(value){$("+").data(instance.getPersistentDataContainer(),value)},distance:(target,option)=>{try{return $("+").distance(instance.location,target,option)}catch(error){switch(error){case"invalid-both":case"invalid-source":throw"ImpossibleError: How the fuck are you seeing this error!?";case"invalid-target":throw"Argument 1 must be a location, vector, or have a location or vector attached!"}}},get effect(){return _.define($("+").fronts("peType"),entry=>{if(alive)return{get:()=>{const effect=instance.getPotionEffect(entry.value);if(effect)return{duration:effect.getDuration(),amplifier:effect.getAmplifier()+1}},set:value=>{if("object"!=typeof value)throw"You must supply an object or a null value!";{value||(value={});const duration=_.clamp(value.duration||0,0,2147483647),amplifier=_.clamp(value.amplifier||0,0,255);duration>0&&amplifier>0?instance.addPotionEffect(entry.value.createEffect(duration,amplifier-1),!0):instance.removePotionEffect(entry.value)}}}})},set effect(value){if("object"!=typeof value)throw"You must supply an object or a null value!";value||(value={});try{_.keys($("+").fronts("peType")).forEach(key=>thing.effect[key]=value[key]||null)}catch(error){throw"That input contains invalid entries!"}},get equipment(){return _.define($("+").fronts("equipmentSlot"),entry=>{if(alive){const slot=util.equipment[entry.key],pascal=_.pascal(slot);return{get:()=>instance.getEquipment()[`get${pascal}`](),set:value=>{if(!(null===(value=$("+").instance(value))||value instanceof ItemStack))throw"You must supply an item stack or a null value!";instance.getEquipment()[`set${pascal}`](value)}}}})},set equipment(value){if("object"!=typeof value)throw"You must supply an object or a null value!";value||(value={});try{_.keys($("+").fronts("equipmentSlot")).forEach(key=>thing.equipment[key]=value[key]||null)}catch(error){throw"That input contains invalid entries!"}},get glowing(){return instance.isGlowing()},set glowing(value){instance.setGlowing(value)},get health(){if(alive)return instance.getHealth()},set health(value){alive&&instance.setHealth(_.clamp(value,0,instance.getMaxHealth()))},get instance(){return instance},get inventory(){if(inventory)return $(instance.getInventory())},set inventory(value){inventory&&instance.getInventory().setContents($(":standardize",value))},get invulnerable(){return instance.isInvulnerable()},set invulnerable(value){instance.setInvulnerable(value)},get item(){return instance.getItemInHand()},set item(value){if(!(null===(value=$("+").instance(value))||value instanceof ItemStack))throw"You must supply an item stack or a null value!";instance.setItemInHand(value)},get lifeform(){return $.entityType[instance.getType()]},set lifeform(value){instance.setType($.entityType[value])},get location(){return $(instance.getLocation())},set location(value){instance.teleport(value)},get mode(){if(player)return $.gameMode[instance.getGameMode()]},set mode(value){if(player)return instance.setGameMode($.gameMode[value])},get name(){return player?instance.getDisplayName():instance.getCustomName()},set name(value){player?(instance.setDisplayName(value),instance.setPlayerListName(value)):(instance.setCustomName(value),instance.setCustomNameVisible(null!==value))},get nbt(){return _.serialize(instance.getHandle().save(new _.nms.NBTTagCompound))},set nbt(value){instance.getHandle().load(_.parse(value))},options:(...args)=>{},get passenger(){return util.passengers(instance).get()},set passenger(value){util.passengers(instance).set(value)},remove:()=>{player?instance.kickPlayer(""):instance.remove()},get silent(){instance.isSilent()},set silent(value){instance.setSilent(value)},get sneaking(){if(player)return instance.isSneaking()},set sneaking(value){player&&instance.setSneaking(value)},sound:(noise,options)=>{player&&(options||(options={}),instance.playSound(options.location?$(":standardize",options.location):instance.getLocation(),$.sound[noise],$.soundCategory[options.category||"master"],options.volume||1,options.pitch||1))},get tag(){return util.tags(instance).get()},set tag(value){util.tags(instance).set(value)},text:(message,type,raw)=>{if(player)switch("boolean"==typeof type&&(raw=type),raw||(message=_.color(message)),type){case"action":instance.sendMessage(ChatMessageType.ACTION_BAR,new TextComponent(message));break;case"title":instance.sendTitle(...message.split("\n"),10,70,20);break;default:instance.sendMessage(message)}},get uuid(){return instance.getUniqueId().toString()},get vector(){return thing.location.vector},set vector(value){thing.location.vector=value},get velocity(){return $(instance.getVelocity())},set velocity(value){instance.setVelocity($(":standardize",value))},get vitality(){if(alive)return instance.getMaxHealth()},set vitality(value){alive&&instance.setMaxHealth(value)},get world(){return instance.getLocation().getWorld()},set world(world){instance.teleport(world.getSpawnLocation())}};return thing}};export const parser=(_,$)=>input=>$(`?${input.lifeform}`,$(input.location)).nbt(input.nbt);export const chain=(_,$)=>({ai:"setter",attribute:"setterNest",bar:"lister",block:"getter",collidable:"setter",data:"appender",distance:"runner",effect:"setterNest",equipment:"setterNest",glowing:"setter",health:"setter",instance:"getter",inventory:"setter",invulnerable:"setter",item:"setterLink",lifeform:"setter",location:"setterLink",mode:"setter",name:"setter",nbt:"appender",note:"runner",passenger:"lister",player:"getter",remove:"voider",serialize:thing=>({format:"entity",lifeform:thing.lifeform,location:thing.location,nbt:data.nbt}),silent:"setter",sneaking:"getter",sound:"voider",tag:"lister",text:"voider",uuid:"getter",vector:"setterLink",velocity:"setterLink",vitality:"setter",world:"setter"});