const NamespacedKey=Java.type("org.bukkit.NamespacedKey");export const wrapper=(_,$)=>instance=>{const thing={get color(){return $("+").backs("barColor")[instance.getColor()]},set color(value){const color=$("+").fronts("barColor")[value];if(!color)throw"That color is invalid!";instance.setColor(color)},get flags(){return _.define($("+").fronts("barFlag"),entry=>({get:()=>instance.hasFlag(entry.value),set:value=>{if("boolean"!=typeof value)throw"You must supply a boolean value!";value?instance.addFlag(entry.value):instance.removeFlag(entry.value)}}))},set flags(value){_.keys($("+").fronts("barFlag")).forEach(key=>thing.flags[key]=value[key]||!1)},get instance(){return instance},get key(){return instance.getKey()},get players(){return[...instance.getPlayers()]},set players(value){if(!_.iterable(value))throw"You must supply an array of player identifiers!";{const input=value.map(player=>{try{return _.player(player)}catch(error){throw"That array contains invalid player entries!"}});thing.players.forEach(player=>instance.removePlayer(player)),input.forEach(player=>instance.addPlayer(player.offline))}},get progress(){return instance.getProgress()},set progress(value){if("number"!=typeof value)throw"You must supply a numeric value!";instance.setProgress(value)},get style(){return $("+").backs("barStyle")[instance.getStyle()]},set style(value){instance.setStyle($("+").fronts("barStyle")[value])},get title(){return instance.getTitle()},set title(value){if("string"!=typeof value)throw"You must supply a string value!";instance.setTitle(value)}};return thing};export const parser=(_,$)=>thing=>{const key=new NamespacedKey(...thing.key.split(":"));let bar=server.getBossBar(key);const color=$("+").fronts("barColor")[thing.color],style=$("+").fronts("barStyle")[thing.style],flags=_.flat(_.entries(thing.flags).map(entry=>entry.value&&$("+").fronts("barFlag")[entry.key]));return bar?(bar.setTitle(thing.title),bar.setColor($("+").fronts("barColor")[thing.color]),flags.map(flag=>bar.addFlag(flag))):bar=server.createBossBar(key,thing.title,color,style,flags),bar.setProgress(thing.progress),$(bar)};export const chain=(_,$)=>({color:"setter",flags:"setterNest",instance:"getter",key:"getter",players:"setter",progress:"setter",serialize:thing=>_.def(thing)?{format:"bar",key:`${thing.key.getNamespace()}:${thing.key.getKey()}`,title:thing.title,progress:thing.progress,color:thing.color,style:thing.style,flags:_.extend({},thing.flags)}:null,style:"setter",title:"setter"});