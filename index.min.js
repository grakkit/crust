const framework=core.import("grakkit/framework"),API=framework.object(framework.entries({action:{source:Java.type("org.bukkit.event.block.Action")},attribute:{source:Java.type("org.bukkit.attribute.Attribute")},amOperation:{source:Java.type("org.bukkit.attribute.AttributeModifier.Operation")},blockFace:{source:Java.type("org.bukkit.block.BlockFace")},enchantment:{source:Java.type("org.bukkit.enchantments.Enchantment"),consumer:value=>value.getKey().getKey()},entityType:{source:Java.type("org.bukkit.entity.EntityType"),consumer:value=>"UNKNOWN"===value.name()?void 0:value.getKey().getKey()},equipmentSlot:{source:Java.type("org.bukkit.inventory.EquipmentSlot")},gameMode:{source:Java.type("org.bukkit.GameMode")},itemFlag:{source:Java.type("org.bukkit.inventory.ItemFlag")},material:{source:Java.type("org.bukkit.Material"),consumer:value=>value.isLegacy()?void 0:value.getKey().getKey()},peType:{source:Java.type("org.bukkit.potion.PotionEffectType"),consumer:value=>value.getHandle().c().split(".")[2]}}),entry=>({[entry.key]:framework.object(framework.array(entry.value.source.values()),value=>{const consumer=entry.value.consumer||(value=>value.name().toLowerCase());return{[consumer(value)]:value}})})),command={on:name=>{let tab=()=>[],run=()=>{};const that={tab:handler=>(tab=handler,that),run:handler=>(run=handler,that)};return core.command({name:name,execute:(...args)=>run(...args),tabComplete:(player,...args)=>tab(player,args.length,...args)||[]}),that}},event={on:shortcut=>{const prefixes=[];let index=event.version;for(;index<3;)prefixes.push(...event.prefixes[index++]);let type=void 0;const suffix=`${framework.pascal(shortcut)}Event`;if(prefixes.forEach(prefix=>{if(void 0===type)try{Java.type(`${prefix}.${suffix}`),type=`${prefix}.${suffix}`}catch(error){}}),void 0===type)throw"EventError: That event does not exist!";{const conditions=[],listeners=[],that={if:condition=>(conditions.push(condition),that),do:listener=>(listeners.push(listener),that)};return core.event(type,(...args)=>{listeners.forEach(listener=>{let ready=!0;conditions.forEach(condition=>{const event=framework.access(args[0]),cancellable=args[0]instanceof Java.type("org.bukkit.event.Cancellable");switch(typeof condition){case"boolean":cancellable&&condition===args[0].isCancelled()&&(ready=!1);break;case"function":condition(...args)||(ready=!1);break;case"object":framework.match(event,condition)||(ready=!1)}}),ready&&listener(...args)})}),that}},prefixes:[["com.destroystokyo.paper.event.block","com.destroystokyo.paper.event.entity","com.destroystokyo.paper.event.executor","com.destroystokyo.paper.event.player","com.destroystokyo.paper.event.profile","com.destroystokyo.paper.event.server"],["org.spigotmc.event.entity","org.spigotmc.event.player"],["org.bukkit.event.block","org.bukkit.event.command","org.bukkit.event.enchantment","org.bukkit.event.entity","org.bukkit.event.hanging","org.bukkit.event.inventory","org.bukkit.event.player","org.bukkit.event.raid","org.bukkit.event.server","org.bukkit.event.vehicle","org.bukkit.event.weather","org.bukkit.event.world"]],version:(()=>{let version=0;try{Java.type("com.destroystokyo.paper.event.player.IllegalPacketEvent")}catch(error){version=1;try{Java.type("org.spigotmc.event.player.PlayerSpawnLocationEvent")}catch(error){version=2}}return version})()},$=(object,...args)=>{if([null,void 0].includes(object))return object;switch(typeof object){case"string":const prefix=object[0],suffix=object.slice(1);switch(prefix){case"~":return eval(suffix);case"!":const item=new(Java.type("org.bukkit.inventory.ItemStack"))(API.material[suffix]);return one("item",item.ensureServerConversions());case"@":const context=args[0]||server.getConsoleSender();return all("entity",...framework.array(server.selectEntities(context,object)));case"#":return core.data(suffix,args[0]);case"?":return one("entity",args[0].world.spawnEntity(args[0],API.entityType[suffix]));case"*":return event.on(suffix);case"/":return command.on(suffix);default:return _.player(object)}case"object":return object instanceof Java.type("org.bukkit.block.Block")?one("block",object):object instanceof Java.type("org.bukkit.entity.Entity")?one("entity",object):object instanceof Java.type("org.bukkit.inventory.ItemStack")?one("item",object):object.constructor===Array?[null,void 0].includes(object[0])?object[0]:object[0].constructor===Object?parsers[object[0].format](object[0]):"object"==typeof object?$(object[0]).serialize():null:null}};Object.assign($,API);import*as block from"./library/block.min.js";import*as entity from"./library/entity.min.js";import*as item from"./library/item.min.js";const wrappers={block:block.wrapper(framework,$),entity:entity.wrapper(framework,$),item:item.wrapper(framework,$)},chainers={block:block.chainer(framework,$),entity:entity.chainer(framework,$),item:item.chainer(framework,$)},parsers={block:block.parser(framework,$),entity:entity.parser(framework,$),item:item.parser(framework,$)},links={block:block.links,entity:entity.links,item:item.links},one=(type,instance)=>{const that=chainers[type](wrappers[type](instance)),output=framework.object(links[type],link=>({[link]:(...args)=>{const result=that[link](...args);return that===result?output:result[0]}}));return output},all=(type,...instances)=>{const that=chainers[type](...instances.map(instance=>wrappers[type](instance)));return framework.extend(that,...Object.getOwnPropertyNames(Array.prototype).map(key=>{const value=Array.prototype[key];if("function"==typeof value)return{[key]:(...args)=>value.apply(instances,args)}}))};core.export($);